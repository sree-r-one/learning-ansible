name: Stage 2 â€“ ESLint Code Analysis

on:
  push:
    branches: [main, develop, githubcicd]
  pull_request:
    branches: [main, develop]
  # Optional: Enable manual triggering from GitHub Actions tab
  workflow_dispatch:

jobs:
  lint:
    name: ESLint Analysis
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # Add other versions if needed: [16.x, 18.x, 20.x]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all tags and branches

      - name: Check for package.json
        id: check-package-json
        run: |
          if [ -f "package.json" ]; then
            echo "package_exists=true" >> $GITHUB_OUTPUT
          else
            echo "package_exists=false" >> $GITHUB_OUTPUT
            echo "No package.json found. Skipping Node.js setup and ESLint."
          fi

      - name: Setup Node.js ${{ matrix.node-version }}
        if: steps.check-package-json.outputs.package_exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          # Change this path if your package.json is not in the root
          cache-dependency-path: "**/package-lock.json"

      - name: Cache node_modules
        if: steps.check-package-json.outputs.package_exists == 'true'
        uses: actions/cache@v3
        id: cache-nodemodules
        with:
          # Update this path to match your project structure
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        if: steps.check-package-json.outputs.package_exists == 'true'
        # Remove working-directory if package.json is in the root
        run: |
          if [ ! -f package-lock.json ]; then
            npm install
          fi
          npm ci

      - name: Run ESLint and Generate Report
        if: steps.check-package-json.outputs.package_exists == 'true'
        # Remove working-directory if your source is in the root
        run: |
          mkdir -p reports
          # Update the source directory and file extensions as needed
          npx eslint . --ext .js,.jsx,.ts,.tsx -f stylish > reports/eslint-report.txt || true

      - name: Create placeholder report
        if: steps.check-package-json.outputs.package_exists == 'false'
        run: |
          mkdir -p reports
          echo "No package.json found. ESLint analysis was skipped." > reports/eslint-report.txt

      - name: Archive ESLint Report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: |
            reports/eslint-report.txt
          retention-days: 14 # Set how long to keep the artifacts
